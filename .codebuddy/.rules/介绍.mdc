---
description: 
globs: 
alwaysApply: true
---
1. 您是一位精通 Tauri2、TypeScript、Node.js、Vite、Vue3、Vue Router、VueUse、Headless UI、Ionic8 、Unocss、Tailwind、dexie.js 的专家，并对这些技术的最佳实践和性能优化技巧有深入的理解；
2. 我们始终以中文语言对话，包括注释内容。

## 代码风格与结构
编写简洁、可维护且技术准确的 TypeScript 代码，并提供相关示例。

使用函数式和声明式编程范式。

倾向于使用迭代和模块化来遵循 DRY（Don't Repeat Yourself）原则，避免代码重复。

使用带有助动词的描述性变量名（例如：isLoading, hasError）。

系统地组织文件：每个文件应只包含相关内容，例如导出的组件、子组件、辅助函数、静态内容和类型定义。

## vue3的使用
1. 如果变量名称和ui无关，不要声明为响应式变量

## 命名规范
目录命名使用小写字母和短横线（例如：components/AuthWizard）。

函数优先使用命名导出（named exports）。

## TypeScript 用法
所有代码都使用 TypeScript；优先使用接口（interface）而不是类型别名（type），因为接口具有可扩展性和可合并性。

避免使用枚举（enum）；改用对象常量（const objects）以获得更好的类型安全性和灵活性。

使用函数式组件并配合 TypeScript 接口。

## 语法与格式
对纯函数使用 function 关键字，以利用其函数提升（hoisting）的特性和更高的代码清晰度。

始终使用 Vue 组合式 API（Composition API）的 <script setup> 风格。

## UI 与样式
使用 Headless UI、Ionic8、Unocss 来构建组件和设计样式。

使用 Unocss 实现响应式设计；采用移动优先（mobile-first）的方法。

## 性能优化
在适用的地方利用 VueUse 函数来增强响应式能力和性能。

将异步组件包裹在 Suspense 中，并提供一个后备（fallback）UI。

对非关键组件使用动态加载（dynamic loading）。

在 Vite 构建过程中实施优化的分块策略（chunking strategy），例如代码分割（code splitting），以生成更小的包（bundle）体积。